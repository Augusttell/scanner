# When calling the tessarct  binary we need to supply a number of flags. The three most important ones are
#  -l , --oem , and --psm
# The -l  flag controls the language of the input text. Weâ€™ll be using eng  (English) for this example but you can see all the languages Tesseract supports here.
# The --oem  argument, or OCR Engine Mode, controls the type of algorithm used by Tesseract.
# You can see the available OCR Engine Modes by executing the following command:
# tesseract --help-oem
# The final important flag, --psm  controls the automatic Page Segmentation Mode used by Tesseract:



# import the necessary packages
from imutils.object_detection import non_max_suppression
import numpy as np
import pytesseract
import argparse
import cv2
import os


# scores : Probabilities for positive text regions.
# geometry : The bounding boxes of the text regions.
def decode_predictions(scores, geometry):
    # grab the number of rows and columns from the scores volume, then
    # initialize our set of bounding box rectangles and corresponding
    # confidence scores
    (numRows, numCols) = scores.shape[2:4]
    rects = []
    confidences = []

    # loop over the number of rows
    for y in range(0, numRows):
        # extract the scores (probabilities), followed by the
        # geometrical data used to derive potential bounding box
        # coordinates that surround text
        scoresData = scores[0, 0, y]
        xData0 = geometry[0, 0, y]
        xData1 = geometry[0, 1, y]
        xData2 = geometry[0, 2, y]
        xData3 = geometry[0, 3, y]
        anglesData = geometry[0, 4, y]

        # loop over the number of columns
        for x in range(0, numCols):
            # if our score does not have sufficient probability,
            # ignore it
            if scoresData[x] < args["min_confidence"]:
                continue

            # compute the offset factor as our resulting feature
            # maps will be 4x smaller than the input image
            (offsetX, offsetY) = (x * 4.0, y * 4.0)

            # extract the rotation angle for the prediction and
            # then compute the sin and cosine
            angle = anglesData[x]
            cos = np.cos(angle)
            sin = np.sin(angle)

            # use the geometry volume to derive the width and height
            # of the bounding box
            h = xData0[x] + xData2[x]
            w = xData1[x] + xData3[x]

            # compute both the starting and ending (x, y)-coordinates
            # for the text prediction bounding box
            endX = int(offsetX + (cos * xData1[x]) + (sin * xData2[x]))
            endY = int(offsetY - (sin * xData1[x]) + (cos * xData2[x]))
            startX = int(endX - w)
            startY = int(endY - h)

            # add the bounding box coordinates and probability score
            # to our respective lists
            rects.append((startX, startY, endX, endY))
            confidences.append(scoresData[x])

    # return a tuple of the bounding boxes and associated confidences
    return (rects, confidences)


# construct the argument parser and parse the arguments
ap = argparse.ArgumentParser()
# ap.add_argument("-i", "--image", type=str,
#                 help="path to input image")
ap.add_argument("-east", "--east", type=str,
                help="path to input EAST text detector")
ap.add_argument("-c", "--min-confidence", type=float, default=0.5,
                help="minimum probability required to inspect a region")
ap.add_argument("-w", "--width", type=int, default=320,
                help="nearest multiple of 32 for resized width")
ap.add_argument("-e", "--height", type=int, default=320,
                help="nearest multiple of 32 for resized height")
ap.add_argument("-p", "--padding", type=float, default=0.0,
                help="amount of padding to add to each border of ROI")
ap.add_argument("-oem", "--oem", type=str, default="1",
                help="OEM SELECTION, model")
ap.add_argument("-psm", "--psm", type=str, default="1",
                help="PSM SELECTION, read line")
ap.add_argument("-detect", "--detect", type=str, default="yes",
                help="Detection being used?")
args = vars(ap.parse_args())

imageList = os.listdir("C:/Users/Augus/PycharmProjects/scanner/images/testDot")
resultsList = []


for imageIter in imageList:
    # load the input image and grab the image dimensions
    image = cv2.imread("C:/Users/Augus/PycharmProjects/scanner/images/testDot/" + imageIter)
    orig = image.copy()
    imageName = imageIter.split(".")[0]

    # Grey scaling
    # coefficients = [0.299, 0.587, 0.114]  # Gives blue channel all the weight
    # for standard gray conversion, coefficients = [0.114, 0.587, 0.299]
    # m = np.array(coefficients).reshape((1, 3))
    # blue = cv2.transform(image, m)

    # ret, thresh1 = cv2.threshold(blue, 140, 245, cv2.THRESH_BINARY)
    # img2 = cv2.merge((thresh1, thresh1, thresh1))
    # image = img2

    # Eroshion
    #erosion_type = cv2.MORPH_ELLIPSE  # cv2.MORPH_RECT, cv2.MORPH_CROSS, cv2.MORPH_ELLIPSE
    # erosion_size = 1

    # element = cv2.getStructuringElement(erosion_type, (2 * erosion_size + 1, 2 * erosion_size + 1),
     #                                   (erosion_size, erosion_size))

    # q = cv2.erode(image, element)



    (origH, origW) = image.shape[:2]

    # set the new width and height and then determine the ratio in change
    # for both the width and height
    (newW, newH) = (args["width"], args["height"])
    rW = origW / float(newW)
    rH = origH / float(newH)

    # resize the image and grab the new image dimensions
    image = cv2.resize(image, (newW, newH))
    (H, W) = image.shape[:2]

    # define the two output layer names for the EAST detector model that
    # we are interested in -- the first is the output probabilities and the
    # second can be used to derive the bounding box coordinates of text
    layerNames = [
        "feature_fusion/Conv_7/Sigmoid",
        "feature_fusion/concat_3"]

    # load the pre-trained EAST text detector
    # print("[INFO] loading EAST text detector...")
    if args["detect"] == "yes":
        net = cv2.dnn.readNet(args["east"])
        # construct a blob from the image and then perform a forward pass of
        # the model to obtain the two output layer sets
        blob = cv2.dnn.blobFromImage(image, 1.0, (W, H), (123.68, 116.78, 103.94), swapRB=True, crop=False)
        net.setInput(blob)
        (scores, geometry) = net.forward(layerNames)

        # decode the predictions, then  apply non-maxima suppression to
        # suppress weak, overlapping bounding boxes
        (rects, confidences) = decode_predictions(scores, geometry)
        boxes = non_max_suppression(np.array(rects), probs=confidences)

        # initialize the list of results
        results = []

        # loop over the bounding boxes
        for (startX, startY, endX, endY) in boxes:
            # scale the bounding box coordinates based on the respective
            # ratios
            startX = int(startX * rW)
            startY = int(startY * rH)
            endX = int(endX * rW)
            endY = int(endY * rH)

            # in order to obtain a better OCR of the text we can potentially
            # apply a bit of padding surrounding the bounding box -- here we
            # are computing the deltas in both the x and y directions
            dX = int((endX - startX) * args["padding"])
            dY = int((endY - startY) * args["padding"])

            # apply padding to each side of the bounding box, respectively
            startX = max(0, startX - dX)
            startY = max(0, startY - dY)
            endX = min(origW, endX + (dX * 2))
            endY = min(origH, endY + (dY * 2))

            # extract the actual padded ROI
            roi = orig[startY:endY, startX:endX]

        # in order to apply Tesseract v4 to OCR text we must supply
        # (1) a language, (2) an OEM flag of 4, indicating that the we
        # wish to use the LSTM neural net model for OCR, and finally
        # (3) an OEM value, in this case, 7 which implies that we are
        # treating the ROI as a single line of text
        # config = ("-l eng --oem 1 --psm 7")
        # config = ("-l eng --oem 1 --psm 3 -c tessedit_char_whitelist=0123456789") # 6 decenter 7 aswell, 8, 9
        # config = ("-l eng --oem 1 --psm 3")  # 6 decenter 7 aswell, 8, 9
            # config = ("-l eng --oem " + args["oem"] + " --psm " + args["psm"] + " -c tessedit_char_whitelist=0123456789")
            config = ("-l eng --oem " + args["oem"] + " --psm " + args["psm"])
            # text = pytesseract.image_to_string(roi, config=config)
            text = pytesseract.image_to_string(roi, config=config)
            # add the bounding box coordinates and OCR'd text to the list
            # of results
            results.append(((startX, startY, endX, endY), text))
            # sort the results bounding box coordinates from top to bottom
            results = sorted(results, key=lambda r: r[0][1])
            # loop over the results

            for ((startX, startY, endX, endY), text) in results:
                # display the text OCR'd by Tesseract
                print("OCR TEXT")
                print("========")
                print(imageName)
                print("{}\n".format(text))

                # strip out non-ASCII text so we can draw the text on the image
                # using OpenCV, then draw the text and a bounding box surrounding
                # the text region of the input image
                text = "".join([c if ord(c) < 128 else "" for c in text]).strip()
                output = orig.copy()
                cv2.rectangle(output, (startX, startY), (endX, endY),
                              (0, 0, 255), 2)
                cv2.putText(output, text, (startX, startY - 20),
                            cv2.FONT_HERSHEY_SIMPLEX, 1.2, (0, 0, 255), 3)
                resultsList.append([imageName, text])

                # show the output image
            cv2.imshow(imageName, output)
            cv2.waitKey(1)

    else:

        # config = ("-l eng --oem " + args["oem"] + " --psm " + args["psm"] + " -c tessedit_char_whitelist=0123456789")
        config = ("-l eng --oem " + args["oem"] + " --psm " + args["psm"])
        # text = pytesseract.image_to_string(roi, config=config)
        text = pytesseract.image_to_string(orig, config=config)

        # display the text OCR'd by Tesseract
        print("OCR TEXT")
        print("========")
        print(imageName)
        #print("{}\n".format(text))
        print(text)
        # strip out non-ASCII text so we can draw the text on the image
        # using OpenCV, then draw the text and a bounding box surrounding
        # the text region of the input image
        resultsList.append([imageName, text])
        output = orig.copy()
        # show the output image
        cv2.imshow(imageName, output)
        cv2.waitKey(1)
a = np.asarray(resultsList)
nameOfExperiment = str("detect_" + args["detect"] + "_OEM_" + args["oem"] + "_PSM_" + args["psm"] + ".txt")
print(nameOfExperiment)
print(a)
np.savetxt(nameOfExperiment, a, delimiter=",", fmt='%s')#, fmt='%s'







